#include <stdio.h>
#include <SDL.h>
#include <vector>
#include <iostream>
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */
#include <conio.h>
#include <SDL_image.h>
#include <SDL_ttf.h>
#include <algorithm>
#include <string>       // para utilizar to_string()
#include <SDL_image.h>
#include <random>
#include <cstdlib>
#include <ctime>
#include <windows.h>
#include "main.h"
#include <set>

using namespace std;





void InsertarFondo(SDL_Renderer* renderer)
{

    //Cargar la imagen de fondo
    SDL_Surface* background = IMG_Load("C:\\Users\\mateo\\source\\repos\\Ruleta0\\Imagenes\\Mipanio1.jpg");
    if (background == NULL) {
        std::cout << "Error al cargar la imagen de fondo: " << SDL_GetError() << std::endl;
        // Manejo del error
    }
    else { cout << "Imagen de Fondo Cargada" << endl; }

    // Renderizar la imagen de fondo
    SDL_Texture* texture2 = SDL_CreateTextureFromSurface(renderer, background);
    if (!texture2) {
        std::cerr << "Error al crear la textura de la imagen de fondo: " << SDL_GetError() << std::endl;
    }
    else { cout << "Textura creada correctamente" << endl; }
    SDL_RenderCopy(renderer, texture2, NULL, NULL);

    SDL_FreeSurface(background);
    SDL_DestroyTexture(texture2);

}

// Realizar una apuesta-guardarla
float HacerApuesta(float &playerBalance, float Ficha) {
    // Restar la cantidad apostada del saldo del jugador
    playerBalance = playerBalance - 1;
    cout << "playerBalance"<< playerBalance << endl;
    // Guardar la apuesta realizada para su posterior verificación
    // Puedes utilizar una estructura de datos como un vector o una lista para guardar las apuestas
    // Aquí se utiliza un mapa que asocia cada tipo de apuesta con la cantidad apostada
    return playerBalance;
}

// Verificar las apuestas ganadoras
void checkBets(int winningNumber) {
    // Calcular las apuestas ganadoras y la cantidad total ganada
    float totalWon = 0.0f;

    bool won = false;

    // Verificar si la apuesta es ganadora en función del número ganador
}

const int SCREEN_WIDTH = 1780;
const int SCREEN_HEIGHT = 900;


int main(int argc, char* argv[]) {
    
    
    
    // Inicializar la semilla de generación de números aleatorios
    srand(time(NULL));

    // Generar un número aleatorio entre 1 y 10
    int numeroAleatorio = rand() % 36 + 0;

  cout << "El numero aleatorio generado es: " << numeroAleatorio << endl;
    
    
    
    
    
    
    
    SDL_Init(SDL_INIT_VIDEO);
    IMG_Init(IMG_INIT_PNG);

    SDL_Window* window = SDL_CreateWindow("Ruleta",
        SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
        1240, 540, SDL_WINDOW_SHOWN);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, 0);

    // Cargar fuente
    TTF_Init();
    TTF_Font* font = TTF_OpenFont("C:/Windows/Fonts/ARIAL.ttf", 29);
    SDL_Color text_color = { 255, 255, 255 };



    InsertarFondo(renderer);

    //Cargar la imagen de Ruleta Giratoria
    SDL_Surface* Ruleta = IMG_Load("C:\\Users\\mateo\\source\\repos\\Ruleta0\\Imagenes\\ruleta3.png");
    if (Ruleta == NULL) {
        std::cout << "Error al cargar la imagen de Ruleta: " << SDL_GetError() << std::endl;
    }
    else { cout << "Imagen de Ruleta Cargada" << endl; }

    // Renderizar la imagen - crear textura Ruleta Giratoria
    SDL_Texture* texture3 = SDL_CreateTextureFromSurface(renderer, Ruleta);
    if (!texture3) {
        std::cerr << "Error al crear la textura de la imagen de fondo: " << SDL_GetError() << std::endl;
    }
    else { cout << "Textura creada correctamente" << endl; }


    SDL_FreeSurface(Ruleta);

    //Cargar la imagen de Bolita Giratoria
    SDL_Surface* Bolita = IMG_Load("C:\\Users\\mateo\\source\\repos\\Ruleta0\\Imagenes\\bolitaRul2.png");
    if (Bolita == NULL) {
        std::cout << "Error al cargar la imagen de Bolita: " << SDL_GetError() << std::endl;
    }
    else { cout << "Imagen de Bolita Cargada" << endl; }

    // Crear textura Bolita
    SDL_Texture* texture4 = SDL_CreateTextureFromSurface(renderer, Bolita);
    if (!texture4) {
        std::cerr << "Error al crear la textura de Bolita: " << SDL_GetError() << std::endl;
    }
    else { cout << "Textura creada correctamente" << endl; }

    SDL_FreeSurface(Bolita);

    // DEFINIR BOTONES

    //Plenos
    std::vector<SDL_Rect> botones(38);
    for (int i = 0; i < 36; ++i) {
        botones[i].x = 100 + (i / 3) * 60;
        botones[i].y = 50 + (2 - i % 3) * 60;
        botones[i].w = 50;
        botones[i].h = 50;
    }
    // Agregar botón adicional "0"
    botones[36].x = 40;    // posición x
    botones[36].y = 50;  // posición y
    botones[36].w = 50;   // ancho
    botones[36].h = 170;   // alto\
            
            // Definir botones de docenas
    std::vector<SDL_Rect> botones_docenas(3);
    for (int i = 0; i < 3; ++i) {
        botones_docenas[i].x = 100 + i * 240;
        botones_docenas[i].y = 230;
        botones_docenas[i].w = 230;
        botones_docenas[i].h = 50;
    }
    // Definir botones restantes
    std::vector<SDL_Rect> botones_restantes(6);
    for (int i = 0; i < 6; ++i) {
        botones_restantes[i].x = 100 + i * 120;
        botones_restantes[i].y = 280;
        botones_restantes[i].w = 110;
        botones_restantes[i].h = 50;
    }
    // Definir botones de Columna
    std::vector<SDL_Rect> botones_Columna(3);
    for (int i = 0; i < 3; ++i) {
        botones_Columna[i].x = 820 + (i / 3) * 60;
        botones_Columna[i].y = 50 + (2 - i % 3) * 60;
        botones_Columna[i].w = 50;
        botones_Columna[i].h = 50;
    }

    
    //CONTADOR
    // Definir el saldo del jugador
    float playerBalance = 115;
    float Ficha = 1;
    float contador = playerBalance;
    
    

   


    //DEFINICIONES-----------------------------------------------------------------------------

    // Obtener el radio de la ruleta a partir de la textura cargada
    int radio = 0;
    SDL_QueryTexture(texture3, nullptr, nullptr, &radio, nullptr);
    radio /= 2;

    // Definir las coordenadas del centro de la ruleta
    int centerX = 1067;
    int centerY = 180;

    // Definir el radio de la bolita (ajustar según el tamaño de la imagen)
    int ballRadius = 5;

    // Definir el ángulo de rotación inicial de la ruleta y la bolita
    float angle = 0;
    float ballAngle = 0;

    // Definir los ángulos correspondientes a cada número en la ruleta (37 números)
    float angleStep = 9.7297f;
    float numberAngles[37];
    for (int i = 0; i < 37; i++) {
        numberAngles[i] = i * angleStep;
    }
    // Definir el número al que deseas que la bolita se detenga
    int targetNumber = 19;

    // Calcular el ángulo correspondiente al número deseado
    float targetAngle = numberAngles[targetNumber];
    
    
     
    //BUCLE PRINCIPAL
    bool running = true;
    while (running) {
        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            switch (event.type) {
            case SDL_QUIT:
                running = false;
                break;
            case SDL_MOUSEBUTTONDOWN:
                int x = event.button.x;
                int y = event.button.y;
                SDL_Point click_point = { x, y };

                for (int i = 0; i < 3; ++i) {
                    if (SDL_PointInRect(&click_point, &botones_docenas[i])) {
                        
                        playerBalance = HacerApuesta(playerBalance, Ficha);
                        std::cout << "Se hizo clic en la docena " << i + 1 << std::endl;
                        std::cout << "playerBalance-> " << playerBalance <<std::endl;
                        break;
                    }
                }


                for (int i = 0; i < 3; ++i) {
                    if (SDL_PointInRect(&click_point, &botones_Columna[i])) {
                        std::cout << "Se hizo clic en la Columna " << i + 1 << std::endl;
                        break;
                    }
                }

                for (int i = 0; i < 6; ++i) {
                    if (SDL_PointInRect(&click_point, &botones_restantes[i])) {

                        switch (i) {
                        case 0:
                            std::cout << "Se hizo clic en el boton 1-18 " << i << std::endl;

                            break;
                        case 1:
                            std::cout << "Se hizo clic en el boton Par " << i << std::endl;
                            break;
                        case 2:
                            std::cout << "Se hizo clic en el boton Rojo " << i << std::endl;
                            break;
                        case 3:
                            std::cout << "Se hizo clic en el boton Negro " << i << std::endl;
                            break;
                        case 4:
                            std::cout << "Se hizo clic en el boton  Impar " << i << std::endl;
                            break;
                        case 5:
                            std::cout << "Se hizo clic en el boton 19-36 " << i << std::endl;
                            break;

                        }

                        break;

                    }
                }

                for (int i = 0; i < 37; ++i) {
                    if (SDL_PointInRect(&click_point, &botones[i])) {
                        if (i != 36)
                        {
                            std::cout << "Se hizo clic en el botón " << i + 1 << std::endl;
                            break;
                        }
                        else
                        {
                            std::cout << "Se hizo clic en el botón " << i - i << std::endl;
                            break;
                        }

                    }
                }
                break;



            }
        }

        if (font == NULL) {
            // Error al cargar la fuente
            std::cerr << "Error al cargar la fuente: " << TTF_GetError() << std::endl;
            return 1;
        }

        // DIBUJAR
        //SDL_SetRenderDrawColor(renderer, 0, 80, 10, 255);// COLOR FONDO
        //SDL_RenderClear(renderer);

        //Pleno
        for (int i = 0; i < 37; ++i) {
            std::set<int> exclude = { 1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36 };
            if (exclude.count(i + 1) == 0)
            {
                SDL_SetRenderDrawColor(renderer, 1, 1, 1, 255);//color Pleno
                SDL_RenderFillRect(renderer, &botones[i]);
            }
            else
            {
                SDL_SetRenderDrawColor(renderer, 255, 1, 1, 255);//color Pleno
                SDL_RenderFillRect(renderer, &botones[i]);
            }


            // Dibujar el número correspondiente
            std::string text;
            if (i == 36) {
                text = "0";
            }
            else {
                text = std::to_string(i + 1);
            }
            SDL_Surface* textSurface = TTF_RenderText_Solid(font, text.c_str(), text_color);
            SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
            SDL_Rect textRect = { botones[i].x + (botones[i].w - textSurface->w) / 2, botones[i].y , textSurface->w, textSurface->h };
            SDL_RenderCopy(renderer, textTexture, NULL, &textRect);

            SDL_FreeSurface(textSurface);
            SDL_DestroyTexture(textTexture);
        }

        // Dibujar botones de DOCENA
        for (int i = 0; i < 3; ++i) {
            // Dibujar botón
            SDL_SetRenderDrawColor(renderer, 255, 200, 255, 255);
            SDL_RenderDrawRect(renderer, &botones_docenas[i]);

            // Dibujar número correspondiente
            std::string text;
            switch (i) {
            case 0:
                text = "1-12";
                break;
            case 1:
                text = "13-24";
                break;
            case 2:
                text = "25-36";
                break;
            }
            SDL_Surface* textSurface = TTF_RenderText_Solid(font, text.c_str(), text_color);
            SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
            SDL_Rect textRect = { botones_docenas[i].x + (botones_docenas[i].w - textSurface->w) / 2, botones_docenas[i].y + 10, textSurface->w, textSurface->h };
            SDL_RenderCopy(renderer, textTexture, NULL, &textRect);

            SDL_FreeSurface(textSurface);
            SDL_DestroyTexture(textTexture);
        }

        // Dibujar botones RESTANTES
        for (int i = 0; i < 6; ++i) {
            // Dibujar botón
            SDL_SetRenderDrawColor(renderer, 255, 200, 255, 255);
            SDL_RenderDrawRect(renderer, &botones_restantes[i]);

            // Dibujar número correspondiente
            std::string text;
            switch (i) {
            case 0:
                text = "1 al 18";
                break;
            case 1:
                text = "Par";
                break;
            case 2:
                text = "ROJO";
                break;
            case 3:
                text = "NEGRO";
                break;
            case 4:
                text = "Impar";
                break;
            case 5:
                text = "19 al 36";
                break;
            }
            SDL_Surface* textSurface = TTF_RenderText_Solid(font, text.c_str(), text_color);
            SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
            SDL_Rect textRect = { botones_restantes[i].x + (botones_restantes[i].w - textSurface->w) / 2, botones_restantes[i].y + 10, textSurface->w, textSurface->h };
            SDL_RenderCopy(renderer, textTexture, NULL, &textRect);

            SDL_FreeSurface(textSurface);
            SDL_DestroyTexture(textTexture);
        }

        // Dibujar botones de Columna
        for (int i = 0; i < 3; ++i) {
            // Dibujar botón
            SDL_SetRenderDrawColor(renderer, 255, 200, 255, 255);
            SDL_RenderDrawRect(renderer, &botones_Columna[i]);

            // Dibujar número correspondiente
            std::string text;
            switch (i) {
            case 0:
                text = "2a1";
                break;
            case 1:
                text = "2a1";
                break;
            case 2:
                text = "2a1";
                break;
            }
            SDL_Surface* textSurface = TTF_RenderText_Solid(font, text.c_str(), text_color);
            SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
            SDL_Rect textRect = { botones_Columna[i].x + (botones_Columna[i].w - textSurface->w) / 2, botones_Columna[i].y + 10, textSurface->w, textSurface->h };
            SDL_RenderCopy(renderer, textTexture, NULL, &textRect);

            SDL_FreeSurface(textSurface);
            SDL_DestroyTexture(textTexture);
        }

        
        // Convertir el contador a string
        std::string texto = "Contador: " + std::to_string(playerBalance);
        // Renderizar texto con la fuente cargada TITULO
        SDL_Surface* surfaceCont = TTF_RenderText_Solid(font, texto.c_str(), text_color);
        if (surfaceCont == NULL) {
            // Error al renderizar el texto
            std::cerr << "Error al renderizar el Contador: " << TTF_GetError() << std::endl;
            return 1;
        }
        SDL_Texture* textureCont = SDL_CreateTextureFromSurface(renderer, surfaceCont);
        if (textureCont == NULL) {
            // Error al crear la textura
            std::cerr << "Error al crear la textura Contador: " << SDL_GetError() << std::endl;
            return 1;
        }
        // Obtener el ancho y alto de la textura
        int texture_width, texture_height;
        SDL_QueryTexture(textureCont, NULL, NULL, &texture_width, &texture_height);
        // Definir la posición donde se mostrará el texto
        int x = 200;   // posición x
        int y = 0;  // posición y
        SDL_Rect Cont_rect = { x, y, texture_width, texture_height };

        SDL_FreeSurface(surfaceCont);
        // Establecer el color del rectángulo al color de fondo
        SDL_SetRenderDrawColor(renderer,200, 200, 200, 255);

        // Dibujar el rectángulo
        SDL_RenderFillRect(renderer, &Cont_rect);

        // Calcular la posición de la bolita en función del ángulo de rotación
        int ballX = centerX + cos(ballAngle) * (radio / 3);
        int ballY = centerY - sin(ballAngle) * (radio / 3);

        // Renderizar textura con rotacion Ruleta Giratotia

        SDL_Rect dstRect = { SCREEN_WIDTH / 2 , SCREEN_HEIGHT / 200 , 350, 350 };
        SDL_RenderCopyEx(renderer, texture3, nullptr, &dstRect, -angle, nullptr, SDL_FLIP_NONE);

        // Renderizar bolita 

        SDL_Rect dstRect2 = { ballX - ballRadius, ballY - ballRadius, ballRadius * 2, ballRadius * 2 };
        SDL_RenderCopy(renderer, texture4, nullptr, &dstRect2);
        ballAngle -= 0.002f;

        
        
        // Renderizar la textura del TEXTO
        SDL_RenderCopy(renderer, textureCont, NULL, &Cont_rect);
        
        
        // Presentar el renderizador ACTUALIZAR----------------------------------------------------------------------------
        SDL_RenderPresent(renderer);

        //Incrementar angulo de rotacion de imagen de Ruleta Giratoria
        angle += 0.05;
        if (angle >= 360) {
            angle = 0;
        }
        // Detener la rotación si se alcanza el ángulo deseado
        if (angle >= targetAngle && ballAngle >= targetAngle) {
            angle = targetAngle;
            ballAngle = targetAngle;
            // Aquí puedes hacer cualquier acción que desees una vez que la bolita se detiene en el número deseado

            cout << "se alcanzo" << endl;
        }
        
    }



   
    SDL_DestroyTexture(texture3);
    
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    TTF_Quit();
    return 0;
}
