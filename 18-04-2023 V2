#include <stdio.h>
#include <SDL.h>
#include <vector>
#include <iostream>
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */
#include <conio.h>
#include <SDL_image.h>
#include <SDL_ttf.h>
#include <string>       // para utilizar to_string()
#include <SDL_image.h>
#include <random>
#include <windows.h>
#include "main.h"
#include <set>

using namespace std;


void InsertarFondo(SDL_Renderer* renderer)
{

//Cargar la imagen de fondo
    SDL_Surface* background = IMG_Load("C:\\Users\\mateo\\source\\repos\\Ruleta0\\Imagenes\\Mipanio1.jpg");
    if (background==NULL) {
        std::cout << "Error al cargar la imagen de fondo: "<<SDL_GetError()  << std::endl;
        // Manejo del error
    }
    else { cout << "Imagen de Fondo Cargada" << endl; }

    // Renderizar la imagen de fondo
    SDL_Texture* texture2 = SDL_CreateTextureFromSurface(renderer, background);
    if (!texture2) {
        std::cerr << "Error al crear la textura de la imagen de fondo: " << SDL_GetError() << std::endl;
        } else { cout<<"Textura creada correctamente"<<endl;}
    SDL_RenderCopy(renderer, texture2, NULL, NULL);

}





int main(int argc, char* argv[]) {
    SDL_Init(SDL_INIT_VIDEO);
    IMG_Init(IMG_INIT_PNG);

    SDL_Window* window = SDL_CreateWindow("Ruleta",
        SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
        960, 540, SDL_WINDOW_SHOWN);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, 0);

    // Cargar fuente
    TTF_Init();
    TTF_Font* font = TTF_OpenFont("C:/Windows/Fonts/ARIAL.ttf", 29);
    SDL_Color text_color = { 255, 255, 255 };

    cout << "HOLAAAAAAAAAAAAAAAAAAAAAAA" << endl;

    InsertarFondo(renderer);
    

    

    // DEFINIR BOTONES
    
    //Plenos
    std::vector<SDL_Rect> botones(38);
    for (int i = 0; i < 36; ++i) {
        botones[i].x = 100 + (i / 3) * 60;
        botones[i].y = 50 + (2 - i % 3) * 60;
        botones[i].w = 50;
        botones[i].h = 50;
    }
    // Agregar botón adicional "0"
    botones[36].x = 40;    // posición x
    botones[36].y = 50;  // posición y
    botones[36].w = 50;   // ancho
    botones[36].h = 170;   // alto\
    
    // Definir botones de docenas
    std::vector<SDL_Rect> botones_docenas(3);
    for (int i = 0; i < 3; ++i) {
        botones_docenas[i].x = 100 + i * 240;
        botones_docenas[i].y = 230;
        botones_docenas[i].w = 230;
        botones_docenas[i].h = 50;
    }
    // Definir botones restantes
    std::vector<SDL_Rect> botones_restantes(6);
    for (int i = 0; i < 6; ++i) {
        botones_restantes[i].x = 100 + i * 120;
        botones_restantes[i].y = 280;
        botones_restantes[i].w = 110;
        botones_restantes[i].h = 50;
    }
    // Definir botones de Columna
    std::vector<SDL_Rect> botones_Columna(3);
    for (int i = 0; i < 3; ++i) {
        botones_Columna[i].x = 820 + (i / 3) * 60;
        botones_Columna[i].y = 50 + (2 - i % 3) * 60;
        botones_Columna[i].w = 50;
        botones_Columna[i].h = 50;
    }

    //TITULO
    
    // Renderizar texto con la fuente cargada TITULO
    SDL_Surface* surface = TTF_RenderText_Solid(font, "Ruleta Mateo", text_color);
    if (surface == NULL) {
        // Error al renderizar el texto
        std::cerr << "Error al renderizar el texto: " << TTF_GetError() << std::endl;
        return 1;
    }
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
    if (texture == NULL) {
        // Error al crear la textura
        std::cerr << "Error al crear la textura: " << SDL_GetError() << std::endl;
        return 1;
    }
    // Obtener el ancho y alto de la textura
    int texture_width, texture_height;
    SDL_QueryTexture(texture, NULL, NULL, &texture_width, &texture_height);

    // Definir la posición donde se mostrará el texto
    int x = 600;   // posición x
    int y = 0;  // posición y
    SDL_Rect text_rect = { x, y, texture_width, texture_height };

    
    
    
    //BUCLE PRINCIPAL
    bool running = true;
    while (running) {
        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            switch (event.type) {
            case SDL_QUIT:
                running = false;
                break;
            case SDL_MOUSEBUTTONDOWN:
                int x = event.button.x;
                int y = event.button.y;
                SDL_Point click_point = { x, y };

                for (int i = 0; i < 3; ++i) {
                    if (SDL_PointInRect(&click_point, &botones_docenas[i])) {
                        std::cout << "Se hizo clic en la docena " << i + 1 << std::endl;
                        break;
                    }
                }
                
                for (int i = 0; i < 3; ++i) {
                    if (SDL_PointInRect(&click_point, &botones_Columna[i])) {
                        std::cout << "Se hizo clic en la Columna " << i + 1 << std::endl;
                        break;
                    }
                }
               
                for (int i = 0; i < 6; ++i) {
                    if (SDL_PointInRect(&click_point, &botones_restantes[i])) {
                        
                        switch (i) {
                        case 0:
                            std::cout << "Se hizo clic en el boton 1-18 " << i  << std::endl;
                            break;
                        case 1:
                            std::cout << "Se hizo clic en el boton Par " << i  << std::endl;
                            break;
                        case 2:
                            std::cout << "Se hizo clic en el boton Rojo " << i  << std::endl;
                            break;
                        case 3:
                            std::cout << "Se hizo clic en el boton Negro " << i  << std::endl;
                            break;
                        case 4:
                            std::cout << "Se hizo clic en el boton  Impar " << i  << std::endl;
                            break;
                        case 5:
                            std::cout << "Se hizo clic en el boton 19-36 " << i  << std::endl;
                            break;
                            
                        }
                        
                        break;
                       
                    }
                }

                for (int i = 0; i < 37; ++i) {
                    if (SDL_PointInRect(&click_point, &botones[i])) {
                        if(i!=36)
                        {std::cout << "Se hizo clic en el botón " << i + 1 << std::endl;
                        break;}
                        else
                        {
                            std::cout << "Se hizo clic en el botón " << i - i << std::endl;
                            break;
                        }
                        
                    }
                }
                break;



            }
        }

        if (font == NULL) {
            // Error al cargar la fuente
            std::cerr << "Error al cargar la fuente: " << TTF_GetError() << std::endl;
            return 1;
        }

        // DIBUJAR
        //SDL_SetRenderDrawColor(renderer, 0, 80, 10, 255);// COLOR FONDO
        //SDL_RenderClear(renderer);
       
        //Pleno
        for (int i = 0; i < 37; ++i) {
            std::set<int> exclude = { 1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36 };
            if (exclude.count(i + 1) == 0)
            {SDL_SetRenderDrawColor(renderer, 1, 1, 1, 255);//color Pleno
            SDL_RenderFillRect(renderer, &botones[i]);
            } 
            else
            {
                SDL_SetRenderDrawColor(renderer, 255, 1, 1, 255);//color Pleno
                SDL_RenderFillRect(renderer, &botones[i]);  
            }


            // Dibujar el número correspondiente
            std::string text;
            if (i == 36) {
                text = "0";
            }
            else {
                text = std::to_string(i + 1);
            }
            SDL_Surface* textSurface = TTF_RenderText_Solid(font, text.c_str(), text_color);
            SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
            SDL_Rect textRect = { botones[i].x + (botones[i].w - textSurface->w) / 2, botones[i].y , textSurface->w, textSurface->h };
            SDL_RenderCopy(renderer, textTexture, NULL, &textRect);

            SDL_FreeSurface(textSurface);
            SDL_DestroyTexture(textTexture);
        }
            
        // Dibujar botones de DOCENA
        for (int i = 0; i < 3; ++i) {
            // Dibujar botón
            SDL_SetRenderDrawColor(renderer, 255, 200, 255, 255);
            SDL_RenderDrawRect(renderer, &botones_docenas[i]);

            // Dibujar número correspondiente
            std::string text;
            switch (i) {
            case 0:
                text = "1-12";
                break;
            case 1:
                text = "13-24";
                break;
            case 2:
                text = "25-36";
                break;
            }
            SDL_Surface* textSurface = TTF_RenderText_Solid(font, text.c_str(), text_color);
            SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
            SDL_Rect textRect = { botones_docenas[i].x + (botones_docenas[i].w - textSurface->w) / 2, botones_docenas[i].y + 10, textSurface->w, textSurface->h };
            SDL_RenderCopy(renderer, textTexture, NULL, &textRect);

            SDL_FreeSurface(textSurface);
            SDL_DestroyTexture(textTexture);
        }
        
        // Dibujar botones RESTANTES
        for (int i = 0; i < 6; ++i) {
            // Dibujar botón
            SDL_SetRenderDrawColor(renderer, 255, 200, 255, 255);
            SDL_RenderDrawRect(renderer, &botones_restantes[i]);

            // Dibujar número correspondiente
            std::string text;
            switch (i) {
            case 0:
                text = "1 al 18";
                break;
            case 1:
                text = "Par";
                break;
            case 2:
                text = "ROJO";
                break;
            case 3:
                text = "NEGRO";
                break;
            case 4:
                text = "Impar";
                break;
            case 5:
                text = "19 al 36";
                break;
            }
            SDL_Surface* textSurface = TTF_RenderText_Solid(font, text.c_str(), text_color);
            SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
            SDL_Rect textRect = { botones_restantes[i].x + (botones_restantes[i].w - textSurface->w) / 2, botones_restantes[i].y + 10, textSurface->w, textSurface->h };
            SDL_RenderCopy(renderer, textTexture, NULL, &textRect);

            SDL_FreeSurface(textSurface);
            SDL_DestroyTexture(textTexture);
        }
        
        // Dibujar botones de Columna
        for (int i = 0; i < 3; ++i) {
            // Dibujar botón
            SDL_SetRenderDrawColor(renderer, 255, 200, 255, 255);
            SDL_RenderDrawRect(renderer, &botones_Columna[i]);

            // Dibujar número correspondiente
            std::string text;
            switch (i) {
            case 0:
                text = "2a1";
                break;
            case 1:
                text = "2a1";
                break;
            case 2:
                text = "2a1";
                break;
            }
            SDL_Surface* textSurface = TTF_RenderText_Solid(font, text.c_str(), text_color);
            SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
            SDL_Rect textRect = { botones_Columna[i].x + (botones_Columna[i].w - textSurface->w) / 2, botones_Columna[i].y + 10, textSurface->w, textSurface->h };
            SDL_RenderCopy(renderer, textTexture, NULL, &textRect);

            SDL_FreeSurface(textSurface);
            SDL_DestroyTexture(textTexture);
        }
        
        
        
        
        
        // Renderizar la textura del texto
            SDL_RenderCopy(renderer, texture, NULL, &text_rect);

            // Presentar el renderizador
            SDL_RenderPresent(renderer);
    }


    
    SDL_DestroyTexture(texture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    TTF_Quit();
    return 0;
}
