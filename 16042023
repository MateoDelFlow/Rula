#include <stdio.h>
#include <SDL.h>
#include <vector>
#include <iostream>
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */
#include <conio.h>
#include <SDL_ttf.h>
#include <string>       // para utilizar to_string()
#include <SDL_image.h>
#include <random>
#include <windows.h>
#include "main.h"

int main(int argc, char* argv[]) {
    SDL_Init(SDL_INIT_VIDEO);

    SDL_Window* window = SDL_CreateWindow("Ruleta",
        SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
        1400, 1000, SDL_WINDOW_SHOWN);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, 0);

    // Cargar fuente
    TTF_Init();
    TTF_Font* font = TTF_OpenFont("C:/Windows/Fonts/ARIAL.ttf", 48);
    SDL_Color text_color = { 255, 0, 255 };



   

    // Definir botones
    std::vector<SDL_Rect> botones(38);
    for (int i = 0; i < 36; ++i) {
        botones[i].x = 100 + i % 12 * 60;
        botones[i].y = 50 + i / 12 * 60;
        botones[i].w = 50;
        botones[i].h = 50;
    }


    // Agregar botón adicional "0"
    botones[36].x = 40;    // posición x
    botones[36].y = 50;  // posición y
    botones[36].w = 50;   // ancho
    botones[36].h = 170;   // alto\
     


    bool running = true;
    while (running) {
        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            switch (event.type) {
            case SDL_QUIT:
                running = false;
                break;
            case SDL_MOUSEBUTTONDOWN:
                int x = event.button.x;
                int y = event.button.y;
                SDL_Point click_point = { x, y };
                for (int i = 0; i < 37; ++i) {
                    if (SDL_PointInRect(&click_point, &botones[i])) {
                        std::cout << "Se hizo clic en el botón " << i + 1 << std::endl;
                        break;
                    }
                }
                break;
            }
        }

        if (font == NULL) {
            // Error al cargar la fuente
            std::cerr << "Error al cargar la fuente: " << TTF_GetError() << std::endl;
            return 1;
        }

        
        
       
        // Renderizar texto con la fuente cargada
        SDL_Surface* surface = TTF_RenderText_Solid(font, "CICLOVIA", text_color);
        if (surface == NULL) {
            // Error al renderizar el texto
            std::cerr << "Error al renderizar el texto: " << TTF_GetError() << std::endl;
            return 1;
        }
        SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
        if (texture == NULL) {
            // Error al crear la textura
            std::cerr << "Error al crear la textura: " << SDL_GetError() << std::endl;
            return 1;
        }
        // Obtener el ancho y alto de la textura
        int texture_width, texture_height;
        SDL_QueryTexture(texture, NULL, NULL, &texture_width, &texture_height);

        // Definir la posición donde se mostrará el texto
        int x = 700;   // posición x
        int y = 500;  // posición y

        // Copiar la textura en la ventana
        SDL_Rect text_rect = { x, y, texture_width, texture_height };
        SDL_RenderCopy(renderer, texture, NULL, &text_rect);

        // Dibujar botones
        SDL_SetRenderDrawColor(renderer, 0, 10, 10, 255);// COLOR FONDO
        SDL_RenderClear(renderer);
        for (int i = 0; i < 37; ++i) {
            SDL_SetRenderDrawColor(renderer, 255, 225, 115, 255);// COLOR BOTONES
            SDL_RenderFillRect(renderer, &botones[i]);
        }




        // Presentar el renderizador
        SDL_RenderPresent(renderer);

    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    TTF_Quit();
    return 0;
}
